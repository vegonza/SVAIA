from nvdlib import searchCVE
from nvdlib.classes import CVE
from datetime import datetime
import textwrap

class Colors:
    RED = '\033[1;31m'
    BLUE = '\033[1;34m'
    YELLOW = '\033[1;33m'
    CYAN = '\033[1;36m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

def format_cve(cve_objects:list[CVE]):
    """Formatea objetos CVE para una salida legible."""
    for cve in cve_objects:
        print("\n" + "=" * 80)
        print(f"{Colors.RED}CVE ID:{Colors.RESET} {Colors.BOLD}{cve.id}{Colors.RESET}")
        print(f"{Colors.BLUE}Estado:{Colors.RESET} {getattr(cve, 'vulnStatus', 'Desconocido')}")
        print(f"{Colors.BLUE}Publicado:{Colors.RESET} {cve.published}")
        print(f"{Colors.BLUE}Última modificación:{Colors.RESET} {cve.lastModified}")

        # Descripciones (priorizando español)
        en_desc = next((desc.value for desc in cve.descriptions if desc.lang == 'en'), "Sin descripción")
        es_desc = next((desc.value for desc in cve.descriptions if desc.lang == 'es'), None)

        print("\n" + Colors.YELLOW + "DESCRIPCIÓN:" + Colors.RESET)
        print(textwrap.fill(es_desc if es_desc else en_desc, width=80))

        # CVSS v3.1
        if hasattr(cve, 'metrics') and getattr(cve.metrics, 'cvssMetricV31', None):
            cvss = cve.metrics.cvssMetricV31[0].cvssData
            print("\n" + Colors.YELLOW + "CVSS v3.1:" + Colors.RESET)
            print(f"  {Colors.CYAN}Puntuación:{Colors.RESET} {cvss.baseScore} ({cvss.baseSeverity})")
            print(f"  {Colors.CYAN}Vector:{Colors.RESET} {cvss.vectorString}")
            print(
                f"  {Colors.CYAN}Impacto:{Colors.RESET} Confidencialidad: {cvss.confidentialityImpact}, Integridad: {cvss.integrityImpact}, Disponibilidad: {cvss.availabilityImpact}")

        # Productos afectados (CPE)
        if hasattr(cve, 'configurations'):
            print("\n" + Colors.YELLOW + "SISTEMAS AFECTADOS:" + Colors.RESET)
            for node in cve.configurations[0].nodes:
                for match in node.cpeMatch:
                    if match.vulnerable:
                        version_info = f" (Versiones anteriores a {match.versionEndExcluding})" if hasattr(match,
                                                                                                           'versionEndExcluding') else ""
                        print(f"  - {match.criteria}{version_info}")

        # Referencias
        if hasattr(cve, 'references'):
            print("\n" + Colors.YELLOW + "REFERENCIAS:" + Colors.RESET)
            for ref in cve.references[:3]:  # Mostrar solo 3
                tags = ', '.join(ref.tags) if hasattr(ref, 'tags') else ''
                print(f"  - {ref.url} ({tags})")

        print("=" * 80 + "\n")


# Ejemplo de uso
results = searchCVE(cveId='CVE-2024-1234')  # Cambia el ID según necesites
resultados = searchCVE(cvssV3Severity='HIGH')
format_cve(resultados)